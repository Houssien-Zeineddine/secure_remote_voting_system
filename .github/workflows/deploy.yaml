name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: secure_voting_system
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, ctype, fileinfo, openssl, pdo, mysql, tokenizer, xml, gd
          coverage: none

      - name: Install Composer dependencies
        working-directory: server
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Configure and test Laravel
        working-directory: server
        run: |
          cp .env.testing .env
          php artisan config:clear
          php artisan key:generate --env=testing
          php artisan config:cache
          php artisan migrate --env=testing
          php artisan test

  build-and-push-laravel-image:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build laravel image
        working-directory: server
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest .

      - name: Push laravel image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest

  build-and-push-react-image:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build react image
        working-directory: client
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest .

      - name: Push react image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

  Copy-docker-compose-to-EC2:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yaml"
          target: "/home/${{ secrets.EC2_USER }}/"

  Deploy-Laravel-Docker:
    runs-on: ubuntu-latest
    needs:
      [
        build-and-push-laravel-image,
        build-and-push-react-image,
        Copy-docker-compose-to-EC2,
      ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Get the directory name (project name) to use as prefix for container names
            PROJECT_NAME=$(basename $(pwd))
            echo "Project name: $PROJECT_NAME"
            
            docker compose down

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

            docker compose up -d --build

            # Wait for containers to initialize
            sleep 15

            # Get the correct container name for backend
            BACKEND_CONTAINER=$(docker ps --format '{{.Names}}' | grep backend)
            echo "Backend container: $BACKEND_CONTAINER"

            if [ -z "$BACKEND_CONTAINER" ]; then
              echo "Backend container not found. Here are the running containers:"
              docker ps
              exit 1
            fi

            # Create .env with proper permissions (using detected container name)
            docker exec $BACKEND_CONTAINER bash -c 'mkdir -p /app && touch /app/.env && chown -R www-data:www-data /app && chmod -R 755 /app'

            # Write .env file
            docker exec $BACKEND_CONTAINER bash -c 'cat > /app/.env <<EOL
            APP_NAME=Laravel
            APP_ENV=production
            APP_KEY=
            APP_DEBUG=false
            APP_URL=http://${{ secrets.APP_URL }}

            LOG_CHANNEL=stack

            DB_CONNECTION=mysql
            DB_HOST=db
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASS }}

            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            CACHE_DRIVER=file
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120
            EOL'

            # Generate application key
            docker exec $BACKEND_CONTAINER php artisan key:generate

            # Clear config
            docker exec $BACKEND_CONTAINER php artisan config:clear
            docker exec $BACKEND_CONTAINER php artisan config:cache

            # Wait for MySQL (using service name 'db' from docker-compose network)
            docker exec $BACKEND_CONTAINER bash -c 'until php -r "try { new PDO(\"mysql:host=db;dbname=$DB_DATABASE\", \"$DB_USERNAME\", \"$DB_PASSWORD\"); exit(0); } catch (PDOException \$e) { exit(1); }"; do sleep 2; done'

            # Run migrations
            docker exec $BACKEND_CONTAINER php artisan migrate --force
            
            # Clean up unused images
            docker image prune -a -f
