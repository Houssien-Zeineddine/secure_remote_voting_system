name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  EC2_SSH_KEY: ${{ secrets.EC2_KEY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  APP_KEY: ${{ secrets.APP_KEY }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Laravel test image
        run: docker build -t laravel-test ./server

      - name: Run Laravel tests
        run: |
          # Create .env.testing dynamically
          echo "APP_KEY=${{ secrets.APP_KEY }}" > ./server/.env.testing
          echo "DB_CONNECTION=mysql" >> ./server/.env.testing
          echo "DB_HOST=host.docker.internal" >> ./server/.env.testing
          echo "DB_PORT=3306" >> ./server/.env.testing
          echo "DB_DATABASE=${{ secrets.DB_NAME }}_testing" >> ./server/.env.testing
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> ./server/.env.testing
          echo "DB_PASSWORD=${{ secrets.DB_PASS }}" >> ./server/.env.testing

          docker run --rm \
            -v $(pwd)/server:/app \
            --user $(id -u):$(id -g) \
            laravel-test \
            bash -c "
              chmod -R 775 /app/bootstrap/cache || true
              chmod -R 775 /app/storage || true

              echo 'ðŸ”§ Installing dependencies...';
              composer install --optimize-autoloader --no-dev || exit 1;

              echo 'ðŸ§¹ Clearing config...';
              php artisan config:clear || exit 1;

              echo 'ðŸ§± Running migrations...';
              php artisan migrate --env=testing || exit 1;

              echo 'ðŸ§ª Running tests...';
              php artisan test --env=testing
            "

      - name: Build and Push Laravel image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest ./server
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest

      - name: Build and Push React image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest ./client
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

      - name: Upload React build to S3 (static hosting)
        run: |
          cd client
          npm ci
          npm run build
          aws s3 sync dist/ s3://fse-final-zeineddine --delete --region eu-west-3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Generate .env file
        run: |
          echo "APP_ENV=production" > .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASS }}" >> .env

      - name: Copy files to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: |
            docker-compose.yml
            .env
          target: /home/${{ secrets.EC2_USER }}

      - name: Deploy on EC2 via SSH
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            cd /home/$EC2_USER
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest
            docker-compose --env-file .env down
            docker-compose --env-file .env up -d --remove-orphans
          EOF
