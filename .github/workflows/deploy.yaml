name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: secure_voting_system
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, ctype, fileinfo, openssl, pdo, mysql, tokenizer, xml, gd
          coverage: none

      - name: Install Composer dependencies
        working-directory: server
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Configure and test Laravel
        working-directory: server
        run: |
          cp .env.testing .env
          php artisan config:clear
          php artisan key:generate --env=testing
          php artisan config:cache
          php artisan migrate --env=testing
          php artisan test

  build-and-push-laravel-image:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build laravel image
        working-directory: server
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest .

      - name: Push laravel image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest

  build-and-push-react-image:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build react image
        working-directory: client
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest .

      - name: Push react image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

  Copy-docker-compose-to-EC2:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yaml"
          target: "/home/${{ secrets.EC2_USER }}/"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          command_timeout: 20m
          script: |
            # Create an env file with Docker credentials for compose
            cat > .env << EOL
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DB_DATABASE=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASS }}
            EOL

            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Pull the latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

            # Stop and remove any existing containers
            echo "Stopping and removing any existing containers..."
            docker compose down -v --remove-orphans

            # Start the containers with the new images
            echo "Starting containers with docker-compose..."
            docker compose up -d

            # Verify containers are running
            echo "Checking containers status:"
            docker ps

            # Wait longer for containers to initialize
            echo "Waiting for containers to initialize..."
            sleep 45

            # Get backend container ID using the service name
            BACKEND_CONTAINER=$(docker ps -q --filter "name=backend")
            echo "Backend container ID: $BACKEND_CONTAINER"

            if [ -z "$BACKEND_CONTAINER" ]; then
              echo "Backend container not found! Here are the running containers:"
              docker ps -a
              exit 1
            fi

            # Wait for backend to be fully ready
            echo "Waiting for backend container to be ready..."
            docker exec $BACKEND_CONTAINER bash -c 'while [ ! -f /app/artisan ]; do sleep 2; done'

            # Create Laravel .env file
            echo "Creating .env file in backend container..."
            docker exec $BACKEND_CONTAINER bash -c 'cat > /app/.env << EOL
            APP_NAME=Laravel
            APP_ENV=production
            APP_KEY=
            APP_DEBUG=false
            APP_URL=http://${{ secrets.APP_URL }}

            LOG_CHANNEL=stack
            LOG_LEVEL=debug

            DB_CONNECTION=mysql
            DB_HOST=db
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASS }}

            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            CACHE_DRIVER=file
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120

            # Add these for better debugging
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=debug
            EOL'

            # Set proper permissions
            echo "Setting permissions on .env file..."
            docker exec $BACKEND_CONTAINER bash -c 'chmod 644 /app/.env && chown bitnami:daemon /app/.env'

            # Check if .env was created successfully
            echo "Verifying .env file:"
            docker exec $BACKEND_CONTAINER bash -c 'ls -la /app/.env'

            # Generate application key
            echo "Generating application key..."
            docker exec $BACKEND_CONTAINER php /app/artisan key:generate

            # Clear all caches and optimize
            echo "Optimizing Laravel..."
            docker exec $BACKEND_CONTAINER php /app/artisan config:clear
            docker exec $BACKEND_CONTAINER php /app/artisan cache:clear
            docker exec $BACKEND_CONTAINER php /app/artisan view:clear
            docker exec $BACKEND_CONTAINER php /app/artisan route:clear
            docker exec $BACKEND_CONTAINER php /app/artisan optimize:clear
            docker exec $BACKEND_CONTAINER php /app/artisan config:cache
            docker exec $BACKEND_CONTAINER php /app/artisan route:cache
            docker exec $BACKEND_CONTAINER php /app/artisan view:cache

            # Wait for MySQL to be ready with better error handling
            echo "Waiting for MySQL to be ready..."
            MAX_RETRIES=30
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if docker exec $BACKEND_CONTAINER php -r "try { \
                new PDO(\"mysql:host=db;dbname=${{ secrets.DB_NAME }}\", \"${{ secrets.DB_USER }}\", \"${{ secrets.DB_PASS }}\"); \
                echo \"Connected successfully\n\"; exit(0); \
              } catch (PDOException \$e) { \
                echo \$e->getMessage() . \"\n\"; exit(1); \
              }"; then
                echo "Database connection successful!"
                break
              fi
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "Attempt $RETRY_COUNT of $MAX_RETRIES - Waiting for database connection..."
              sleep 5
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to connect to database after $MAX_RETRIES attempts"
              docker logs $BACKEND_CONTAINER
              exit 1
            fi

            # Run migrations with force flag
            echo "Running migrations..."
            docker exec $BACKEND_CONTAINER php /app/artisan migrate --force

            # Check migration status
            echo "Checking migration status..."
            docker exec $BACKEND_CONTAINER php /app/artisan migrate:status

            # Verify Laravel is running
            echo "Verifying Laravel is running..."
            docker exec $BACKEND_CONTAINER php /app/artisan about

            # Clean up unused images
            echo "Cleaning up unused images..."
            docker image prune -a -f

            echo "Deployment completed successfully!"
