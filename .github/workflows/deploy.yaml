name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: secure_voting_system_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, ctype, fileinfo, openssl, pdo, mysql, tokenizer, xml, gd
          coverage: none

      - name: Install Composer dependencies
        working-directory: server
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Configure and test Laravel
        working-directory: server
        run: |
          cp .env.testing .env
          php artisan config:clear
          php artisan key:generate --env=testing
          php artisan config:cache
          php artisan migrate --env=testing
          php artisan test

  build-and-push-laravel-image:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build laravel image
        working-directory: server
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest .

      - name: Push laravel image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest

  build-and-push-react-image:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build react image
        working-directory: client
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest .

      - name: Push react image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

  Copy-docker-compose-to-EC2:
    needs: [build-and-push-react-image, build-and-push-laravel-image]
    runs-on: ubuntu-latest

    steps:
      - name: Install Docker Compose on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose-plugin
            sudo usermod -aG docker $USER
            newgrp docker
            sudo systemctl restart docker

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yaml"
          target: "/home/${{ secrets.EC2_USER }}/"

  Deploy-Laravel-Docker:
    runs-on: ubuntu-latest
    needs: Copy-docker-compose-to-EC2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cat > .env << EOL
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            APP_NAME=Laravel
            APP_ENV=production
            APP_KEY=base64:ql0FVsSE4p7sS6kjA8PjJYRRZaq/RWPfFInBybCtnwo= 
            APP_DEBUG=true
            APP_URL=http://13.36.171.143

            LOG_CHANNEL=stack
            LOG_LEVEL=debug

            DB_CONNECTION=mysql
            DB_HOST=db
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASS }}

            CACHE_DRIVER=file
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120

            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_TTL=60     

            JWT_ALGO=HS256

            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            EOL

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            sudo usermod -aG docker $USER

            docker-compose pull

            docker-compose down

            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

            docker-compose up -d

            sleep 30

            BACKEND_CONTAINER=$(docker ps -qf "name=backend")
            if [ -z "$BACKEND_CONTAINER" ]; then
              echo "Backend container not found!"
              docker ps -a
              exit 1
            fi

            docker exec $BACKEND_CONTAINER mkdir -p /app/storage/psysh
            docker exec $BACKEND_CONTAINER chmod -R 775 /app/storage/psysh
            docker exec $BACKEND_CONTAINER /bin/sh -c "echo 'PSYSH_CONFIG_DIR=/app/storage/psysh' >> /app/.env"

            docker exec $BACKEND_CONTAINER chown -R www-data:www-data /app/storage
            docker exec $BACKEND_CONTAINER chmod -R 775 /app/storage
            docker exec $BACKEND_CONTAINER chmod -R 775 /app/bootstrap/cache

            docker exec $BACKEND_CONTAINER php artisan optimize:clear
            docker exec $BACKEND_CONTAINER php artisan config:cache

            docker exec $BACKEND_CONTAINER php artisan migrate --force

            SEED_NEEDED=$(docker exec $BACKEND_CONTAINER php artisan tinker --execute '
                echo (
                    DB::table("users")->count() === 0 &&
                    DB::table("elections")->count() === 0 &&
                    DB::table("counted_votes")->count() === 0
                    DB::table("malicious_votes")->count() === 0
                ) ? "true" : "false";
            ')

            if [ "$SEED_NEEDED" = "true" ]; then
                echo "Seeding fresh data..."
                docker exec $BACKEND_CONTAINER php artisan db:seed --force
            else
                echo "Database already has data. Skipping seeding."
            fi

            if [ $? -ne 0 ]; then
              echo "Migration failed! Showing logs:"
              docker logs $BACKEND_CONTAINER | grep -i error
              exit 1
            fi

            docker image prune -a -f
