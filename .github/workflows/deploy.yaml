- name: Deploy on EC2
  uses: appleboy/ssh-action@v0.1.10
  with:
    host: ${{ secrets.EC2_HOST }}
    username: ${{ secrets.EC2_USER }}
    key: ${{ secrets.EC2_KEY }}
    command_timeout: 20m
    script: |
      # Create an env file with Docker credentials for compose
      cat > .env << EOL
      DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
      DB_DATABASE=${{ secrets.DB_NAME }}
      DB_USERNAME=${{ secrets.DB_USER }}
      DB_PASSWORD=${{ secrets.DB_PASS }}
      EOL

      # Login to Docker Hub
      echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Pull the latest images
      docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_laravel_image:latest
      docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final_project_react_image:latest

      # Stop and remove any existing containers
      echo "Stopping and removing any existing containers..."
      docker compose down -v --remove-orphans

      # Start the containers with the new images
      echo "Starting containers with docker-compose..."
      docker compose up -d

      # Verify containers are running
      echo "Checking containers status:"
      docker ps

      # Wait longer for containers to initialize
      echo "Waiting for containers to initialize..."
      sleep 45

      # Get backend container ID using the service name
      BACKEND_CONTAINER=$(docker ps -q --filter "name=backend")
      echo "Backend container ID: $BACKEND_CONTAINER"

      if [ -z "$BACKEND_CONTAINER" ]; then
        echo "Backend container not found! Here are the running containers:"
        docker ps -a
        exit 1
      fi

      # Wait for backend to be fully ready
      echo "Waiting for backend container to be ready..."
      docker exec $BACKEND_CONTAINER bash -c 'while [ ! -f /app/artisan ]; do sleep 2; done'

      # Create Laravel .env file
      echo "Creating .env file in backend container..."
      docker exec $BACKEND_CONTAINER bash -c 'cat > /app/.env << EOL
      APP_NAME=Laravel
      APP_ENV=production
      APP_KEY=
      APP_DEBUG=false
      APP_URL=http://${{ secrets.APP_URL }}

      LOG_CHANNEL=stack

      DB_CONNECTION=mysql
      DB_HOST=db
      DB_PORT=3306
      DB_DATABASE=${{ secrets.DB_NAME }}
      DB_USERNAME=${{ secrets.DB_USER }}
      DB_PASSWORD=${{ secrets.DB_PASS }}

      OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

      CACHE_DRIVER=file
      QUEUE_CONNECTION=sync
      SESSION_DRIVER=file
      SESSION_LIFETIME=120
      EOL'

      # Set proper permissions
      echo "Setting permissions on .env file..."
      docker exec $BACKEND_CONTAINER bash -c 'chmod 644 /app/.env && chown bitnami:daemon /app/.env'

      # Check if .env was created successfully
      echo "Verifying .env file:"
      docker exec $BACKEND_CONTAINER bash -c 'ls -la /app/.env'

      # Generate application key
      echo "Generating application key..."
      docker exec $BACKEND_CONTAINER php /app/artisan key:generate

      # Cache configuration
      echo "Caching configuration..."
      docker exec $BACKEND_CONTAINER php /app/artisan config:clear
      docker exec $BACKEND_CONTAINER php /app/artisan config:cache

      # Wait for MySQL to be ready
      echo "Waiting for MySQL to be ready..."
      docker exec $BACKEND_CONTAINER bash -c 'until php -r "try { \
        new PDO(\"mysql:host=db;dbname=${{ secrets.DB_NAME }}\", \"${{ secrets.DB_USER }}\", \"${{ secrets.DB_PASS }}\"); \
        echo \"Connected successfully\n\"; exit(0); \
      } catch (PDOException \$e) { \
        echo \$e->getMessage() . \"\n\"; sleep(2); \
      }"; do echo "Waiting for DB connection..."; sleep 2; done'

      # Run migrations
      echo "Running migrations..."
      docker exec $BACKEND_CONTAINER php /app/artisan migrate --force

      # Clean up unused images
      echo "Cleaning up unused images..."
      docker image prune -a -f

      echo "Deployment completed successfully!"
